name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build and deploy'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy using ssh
        uses: appleboy/ssh-action@master
        env:
          FIREBASE_SA: ${{ secrets.FIREBASE_SA }}
          DATABASE_ENV: ${{ secrets.DATABASE_ENV }}
          SECRETS_FIREBASE: ${{ secrets.SECRETS_FIREBASE }}
          SERVERS: ${{ secrets.SERVERS }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VIVI_APP_SSH_KEY }}
          port: 22
          envs: FIREBASE_SA,SECRETS_FIREBASE,DATABASE_ENV,SERVERS
          script: |
          
            REPO_URL="https://github.com/abdullahalhoothy/honey_app.git"
            DIR_NAME="honey_app"
            BACKEND_NAME="backend_api_honey"
            
            set -x  # Enable debug mode
            echo "Starting deployment process..."
            echo "Current directory: $(pwd)" 
            
            if [ -d "$DIR_NAME" ]; then
                cd $DIR_NAME
                docker compose down
                echo "Docker compose down completed."
                cd ..
                rm -rf $DIR_NAME
                echo "Removed existing $DIR_NAME directory." 
            fi
            
            # Clone the repository and update submodules
            git clone --recursive $REPO_URL &&
            cd $DIR_NAME &&
            git submodule update --remote --recursive --merge &&
            git submodule foreach 'git checkout main && git pull origin main'
            echo "Repository cloned and submodules updated."

            # Create secrets directory if it doesn't exist
            mkdir -p "${BACKEND_NAME}/secrets"
            mkdir -p "storage/secrets"
            echo "Secret directories created."
            
            # Add error checking
            if [ ! -d "${BACKEND_NAME}/secrets" ]; then
                echo "Failed to create secrets directory"
                exit 1
            fi

            # Create secret files
            echo '${{ secrets.FIREBASE_SA }}' > $BACKEND_NAME/secrets/secret_firebase_sa.json
            echo '${{ secrets.SECRETS_FIREBASE }}' > $BACKEND_NAME/secrets/secrets_firebase.json
            echo '${{ secrets.DATABASE_ENV }}' > storage/secrets/database.env
            echo '${{ secrets.SERVERS }}' > storage/secrets/servers.json
            echo "Secret files created."
            
            # Build and run Docker containers
            docker compose build
            echo "Docker compose build completed."

            docker compose up -d
            echo "Docker compose up completed."
            
            echo "Deployment process finished."

